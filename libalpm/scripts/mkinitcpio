#!/usr/bin/env bash
# SPDX-License-Identifier: GPL-2.0-only

set -e

args=()
package=0

process_preset() {
    if [[ -n "$pkgbase" && -e "$preset" ]]; then
        if ! cmp "$preset" > /dev/null 2>&1 <(sed "s|%PKGBASE%|${pkgbase}|g" /usr/share/mkinitcpio/hook.preset); then
            if [[ ! -e "$preset.pacsave" ]]; then
                # save the preset as pacsave
                mv -- "$preset" "$preset.pacsave" && return 0
            fi
        else
            # remove the preset
            rm -- "$preset" && return 0
        fi
    fi
}

read_preset() {
    local pkgbase="$1" p preset_image preset_uki preset_kver

    if [[ -v PRESETS ]]; then
        for p in "${PRESETS[@]}"; do
            declare -n preset_image="${p}_image" preset_uki="${p}_uki" preset_kver="${p}_kver"

            if [[ -v preset_image ]]; then
                filelist+=("${preset_image}")
            elif [[ -v ALL_image ]]; then
                filelist+=("${ALL_image}")
            fi
            if [[ -v preset_uki ]]; then
                filelist+=("${preset_uki}")
            elif [[ -v ALL_uki ]]; then
                filelist+=("${ALL_uki}")
            fi
            if [[ -v preset_kver ]]; then
                filelist+=("${preset_kver}")
            elif [[ -v ALL_kver ]]; then
                filelist+=("${ALL_kver}")
            fi
        done
    else
        filelist+=("/boot/vmlinuz-${pkgbase}"
                  "/boot/initramfs-${pkgbase}.img"
                  "/boot/initramfs-${pkgbase}-fallback.img"
                  "/efi/EFI/arch-${pkgbase}.efi"
                  "/efi/EFI/Linux/arch-${pkgbase}-fallback.efi")
    fi
}

install_kernel() {
    preset="/etc/mkinitcpio.d/${1}.preset"
    if [[ ! -e "$preset" ]]; then
        if [[ -e "$preset.pacsave" ]]; then
            # move the pacsave to the template
            mv -- "${preset}.pacsave" "$preset"
        else
            # create the preset from the template
            sed "s|%PKGBASE%|${1}|g" /usr/share/mkinitcpio/hook.preset \
                | install -Dm644 /dev/stdin "$preset"
        fi
    fi

    # always install the kernel
    install -Dm644 "$line" "/boot/vmlinuz-${1}"

    # compound args for each kernel
    args+=(-p "$1")
}

remove_kernel() {
    local pkgbase="$1"
    local preset="/etc/mkinitcpio.d/${pkgbase}.preset"

    # subshell to avoid namespace pollution
    (
        # source the preset to get the kernel and image locations
        # shellcheck disable=SC1090
        [[ -s "$preset" ]] && . "$preset"
        read_preset "$pkgbase"

        # access all the files to trigger any potential automounts
        stat -- /boot/ /efi/ "${filelist[@]}" &>/dev/null || :

        # remove the actual kernel and images for the package being removed
        rm -f -- "${filelist[@]}"
    ) || return
    # remove the preset
    process_preset "$pkgbase" "$preset"
}

while read -r line; do
    if [[ "$line" != */vmlinuz ]]; then
        # triggers when it's a change to usr/lib/initcpio/*
        package=1
        continue
    fi

    if ! read -r pkgbase > /dev/null 2>&1 < "${line%/vmlinuz}/pkgbase"; then
        # if the kernel has no pkgbase, we skip it
        continue
    fi

    case "$1" in
        install) install_kernel "$pkgbase";;
        remove) remove_kernel "$pkgbase";;
    esac
done

if (( package )) && compgen -G /etc/mkinitcpio.d/"*.preset" > /dev/null; then
    case "$1" in
        install)
            # change to use all presets
            args=(-P)
            ;;
        remove)
          shopt -s nullglob
          for preset in /etc/mkinitcpio.d/*.preset; do
              pkgbase=${preset##*/}
              pkgbase=${pkgbase%.preset}
              process_preset "$pkgbase" "$preset"
          done
          shopt -u nullglob
          ;;
    esac
fi

if [[ "$1" == "install" ]] && (( ${#args[@]} )); then
    mkinitcpio "${args[@]}"
fi
